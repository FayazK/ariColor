{"name":"ariColor","tagline":"A PHP library for color manipulation in WordPress themes and plugins","body":"# ariColor\r\nA PHP library for color manipulation in themes and plugins\r\n\r\n[![Build Status](https://travis-ci.org/aristath/ariColor.svg?branch=master)](https://travis-ci.org/aristath/ariColor) [![codecov.io](https://codecov.io/github/aristath/ariColor/coverage.svg?branch=master)](https://codecov.io/github/aristath/ariColor?branch=master) [![License](https://img.shields.io/badge/license-GPL--2.0%2B-red.svg)](https://raw.githubusercontent.com/aristath/ariColor/master/LICENSE) \r\n\r\n`ariColor` is a PHP library that will hopefully help WordPress theme developers do their job easier and more effectively.\r\n\r\nIt does not provide you with methods like `lighten()`, `darken()` etc. Instead, what it does is give you the ability to create these yourself with extreme ease by giving you all the properties of a color at hand, and allowing you to manipulate them however you see fit.\r\n\r\nExample:\r\n\r\nFirst, let's create our color object:\r\n\r\n```php\r\n$color = ariColor::newColor( '#049CBE', 'hex' );\r\n```\r\n\r\nIf you don't like using that method you can write your own proxy function:\r\n\r\n```php\r\nfunction my_custom_color_function( $color = '#ffffff' ) {\r\n\treturn ariColor::newColor( $color, 'auto' );\r\n}\r\n```\r\n\r\nNotice that we used `auto` as the mode. If you use `auto` or completely omit the 2nd argument, `ariColor` will auto-detect it for you. You can use `rgb`, `rgba`, `hsl`, `hsla`, or even arrays as colors.\r\n\r\nThen you can use it like this:\r\n\r\n```php\r\n$color = my_custom_color_function( '#049CBE' );\r\n```\r\n\r\nSay you want to get the values for red, green, blue:\r\n\r\n```php\r\n// Get red value:\r\n$red = $color->red;\r\n// Get green value:\r\n$green = $color->green;\r\n// Get blue value\r\n$blue = $color->blue;\r\n```\r\n\r\nOr you want to get the hue, saturation, lightness or even luminance of your color:\r\n\r\n```php\r\n// Get hue\r\n$hue = $color->hue;\r\n// Get saturation\r\n$saturation = $color->saturation;\r\n// Get lightness\r\n$lightness = $color->lightness;\r\n// Get luminance\r\n$luminance = $color->luminance;\r\n```\r\n\r\n### Scenario 1:\r\n\r\nYou have an option where users can define the background color for their `<body>`. In order to make sure the text is always readable, you can either give them a 2nd option to set the text color, or auto-calculate it for readability.\r\n\r\nExample function that given a background color decides if we're going to use white/black text color:\r\n\r\n```php\r\n/**\r\n * determine the luminance of the given color\r\n * and then return #FFFFFF or #222222 so that our text is always readable\r\n * \r\n * @param $background color string|array\r\n *\r\n * @return string (hex color)\r\n */\r\nfunction custom_get_readable_color( $background_color = '#FFFFFF' ) {\r\n\t$color = ariColor::newColor( $background_color );\r\n\treturn ( 127 < $color->luminance ) ? '#222222' : '#FFFFFF';\r\n}\r\n```\r\n\r\nUsage: \r\n\r\n```php\r\n$text_color = custom_get_readable_color( get_theme_mod( 'bg_color', '#ffffff' ) );\r\n```\r\n\r\nEasy, right? What we did above is simply check the luminance of the background color, and then if the luminance is greater than 127 we return black, otherwise we return white.\r\n\r\n### Scenario 2:\r\n\r\nWe have a HEX color, and we want to get the same color as rgba, with an opacity of `0.7`:\r\n\r\n```php\r\nfunction my_theme_get_semitransparent_color( $color ) {\r\n\t// Create the color object\r\n\t$color_obj = ariColor::newColor( $color );\r\n\t// Set alpha (opacity) to 0.7\r\n\t$color_obj->alpha = 0.7;\r\n\t// return a CSS-formated rgba color\r\n\treturn $color_obj->toCSS( 'rgba' );\r\n}\r\n```\r\n\r\nor you could write it shorter like this:\r\n\r\n```php\r\nfunction my_theme_get_semitransparent_color( $color ) {\r\n\t$color_obj = ariColor::newColor( $color );\r\n\treturn $color_obj->getNew( 'alpha', .7 )->toCSS( 'rgba' );\r\n}\r\n```\r\n\r\nor the same thing like this:\r\n\r\n```php\r\nfunction my_theme_get_semitransparent_color( $color ) {\r\n\t$color_obj = ariColor::newColor( $color );\r\n\t$color_new = ariColor::newColor( 'rgba(' . $color_obj->red . ',' . $color_obj->green . ',' . $color_obj->blue . ',0.7)', 'rgba' );\r\n\treturn $color_new->->toCSS( 'rgba' );\r\n}\r\n```\r\n\r\nThe choice is yours and you can manipulate colors in any way you want.\r\n\r\n## Properies list:\r\n\r\n* `mode` (string: hex/rgb/rgba/hsl/hsla)\r\n* `red` (red value, `integer`, range: 0-255)\r\n* `green` (green value, `integer`, range: 0-255)\r\n* `blue` (blue value, `integer`, range: 0-255)\r\n* `alpha`(alpha/opacity value, `float`, range 0-1)\r\n* `hue` (color hue, `integer`, range 0-360)\r\n* `saturation` (color saturation, `integer`, range 0-100)\r\n* `lightness` (color lightness, `integer`, range 0-100)\r\n* `luminance`(color luminance, `integer`, range 0-255)\r\n* `hex` (the hex value of the current color)\r\n\r\n## Methods:\r\n\r\n* `newColor` \r\n* `getNew`\r\n* `toCSS`\r\n\r\n### newColor\r\n\r\nUsed to create a new object.\r\nExample: \r\n\r\n```php\r\n$color = ariColor::newColor( 'rgba(0, 33, 176, .62)' );\r\n\r\n```\r\nThe `newColor` method has 2 arguments:\r\n\r\n1. `$color`: can accept any color value (see below for examples)\r\n2. `$mode`: the color mode. If undefined will be auto-detected.\r\n\r\nSome example of acceptable formats for the color used in the 1st argument on the method:\r\n\r\n```php\r\n'black'\r\n'darkmagenta'\r\n'#000'\r\n'#000000'\r\n'rgb(0, 0, 0)'\r\n'rgba(0, 0, 0, 1)'\r\n'hsl(0, 0%, 0%)'\r\n'hsla(0, 0%, 0%, 1)'\r\narray( 'rgba' => 'rgba(0,0,0,1)' )\r\narray( 'color' => '#000000' )\r\narray( 'color' => '#000000', 'alpha' => 1 )\r\narray( 'color' => '#000000', 'opacity' => '1' )\r\narray( 0, 0, 0, 1 )\r\narray( 0, 0, 0 )\r\narray( 'r' => 0, 'g' => '0', 'b' => 0 )\r\narray( 'r' => 0, 'g' => '0', 'b' => 0, 'a' => 1 )\r\narray( 'red' => 0, 'green' => 0, 'blue' => 0 )\r\narray( 'red' => 0, 'green' => 0, 'blue' => 0, 'alpha' => 1 )\r\narray( 'red' => 0, 'green' => 0, 'blue' => 0, 'opacity' => 1 )\r\n```\r\n\r\nAnd more! This way you can use the saved values from all known frameworks.\r\n\r\n### getNew\r\n\r\nUsed if we want to create a new object identical to the one we already have, but changing one of its properties.\r\n\r\nThe `getNew` method has 2 arguments:\r\n\r\n1. `$property`: can accept any of the properties listed above\r\n2. `$value`: the new value of the property.\r\n\r\nExample 1: Darken a color by 10%\r\n\r\n```php\r\n// Create a new object using rgba as our original color\r\n$color = ariColor::newColor( 'rgba(0, 33, 176, .62)' );\r\n// Darken the color by 10%\r\n$dark = $color->getNew( 'lightness', $color->lightness - 10 );\r\n// return HEX color\r\nreturn $dark->toCSS( 'hex' );\r\n```\r\n\r\nOr you could write the above simpler like this by combining 2 steps:\r\n\r\n```php\r\n$color = ariColor::newColor( 'rgba(0, 33, 176, .62)' );\r\nreturn $color->getNew( 'lightness', $color->lightness - 10 )->toCSS( 'hex' )\r\n```\r\n\r\nExample 2: Remove any traces of green from an HSL color\r\n\r\n```php\r\n// Create a new color object using an HSL color as source\r\n$color = ariColor::newColor( 'hsl(200, 33%, 82%)' );\r\n// I don't like green, color, let's remove any traces of green from that color\r\n$new_color = $color->getNew( 'green', 0 );\r\n```\r\n\r\n### toCSS\r\n\r\nReturns a CSS-formatted color value.\r\n\r\nThe `toCSS` has a single argument:\r\n\r\n1. `$mode`: can accept any of the values listed below (defaults to `hex` if undefined)\r\n\r\n* `hex`\r\n* `rgb`\r\n* `rgba`\r\n* `hsl`\r\n* `hsla`\r\n\r\nExample:\r\n\r\n```php\r\n// Create our instance\r\n$color = ariColor::newColor( 'hsl(200, 33%, 82%)' );\r\n// Get HEX color\r\n$hex = $color->toCSS( 'hex' );\r\n// Get RGB color\r\n$rgb = $color->toCSS( 'rgb' );\r\n// Get RGBA color\r\n$rgba = $color->toCSS( 'rgba' );\r\n// Get HSL color\r\n$hsl = $color->toCSS( 'hsl' );\r\n// Get HSLA color\r\n$hsla = $color->toCSS( 'hsla' );\r\n```\r\n\r\n### Color sanitization:\r\n\r\nAll colors are sanitized inside the class so you could easily write a proxy function that will always return a sanitized color like this:\r\n\r\n```php\r\n/**\r\n * Sanitizes a CSS color.\r\n * \r\n * @param $color  string   accepts all CSS-valid color formats\r\n * @return        string   the sanitized color\r\n */\r\nfunction custom_color_sanitize( $color = '' ) {\r\n\t// If empty, return empty\r\n\tif ( '' == $color ) {\r\n\t\treturn '';\r\n\t}\r\n\t// If transparent, return 'transparent'\r\n\tif ( is_string( $color ) && 'transparent' == trim( $color ) ) {\r\n\t\treturn 'transparent';\r\n\t}\r\n\t// Instantiate the object\r\n\t$color_obj = ariColor::newColor( $color );\r\n\t// Return a CSS value, using the auto-detected mode\r\n\treturn $color_obj->toCSS( $color_obj->mode );\r\n}\r\n```\r\n\r\nYou can even use a function like this one as a `sanitize_callback` in a customizer control :)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}